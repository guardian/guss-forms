@charset "UTF-8";
/**
 * `animation` prefixer.
 *
 * @param {*} $args
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/animation animation on MDN
 */
/**
 * `animation-delay` prefixer.
 *
 * @param {*} $args
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/animation-delay animation-delay on MDN
 */
/**
 * `background-size` prefixer.
 *
 * @param {Arglist} $args
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/background-size background-size on MDN
 */
/**
 * `border-radius` prefixer.
 *
 * @param {Number} $radius (5px)
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/border-radius border-radius on MDN
 */
/**
 * `box-shadow` prefixer.
 *
 * @param {Arglist} $args
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/box-shadow box-shadow on MDN
 */
/**
 * `box-sizing` prefixer.
 *
 * @param {String} $box
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/box-sizing box-sizing on MDN
 */
/**
 * `column-width` prefixer. Uses `rem` if defined.
 *
 * @param {String} $box
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/column-width column-width on MDN
 */
/**
 * `flex` prefixer.
 *
 * @param {Number}          $flex-grow   (0)
 * @param {Number}          $flex-shring (1)
 * @param {Number | String} $flex-basis  (auto)
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/flex flex on MDN
 */
/**
 * `flex-direction` prefixer.
 *
 * @param {String} $direction row | row-reverse | column | column-reverse
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/flex-direction flex-direction on MDN
 */
/**
 * `flex-basis` prefixer.
 *
 * @param {Number | String} $value (auto)
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/flex-basis flex-basis on MDN
 */
/**
 * `display: flex` prefixer.
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/flex flex on MDN
 */
/**
 * `flex-grow` prefixer.
 *
 * @param {Number} $value (0)
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/flex-grow flex-grow on MDN
 */
/**
 * `@keyframes` prefixer.
 *
 * @param {String} $name
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes @keyframes on MDN
 */
/**
 * `transform: rotate()` prefixer.
 *
 * @param {Number} $angle
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/transform#rotate transform: rotate() on MDN
 */
/**
 * `position: sticky` prefixer.
 * Support is very limited but should be used in iOS.
 * Note that Blink temporarily dropped support until they get their
 * "scrolling and compositing house in order"
 *
 * @link http://updates.html5rocks.com/2012/08/Stick-your-landings-position-sticky-lands-in-WebKit position: sticky on WebKit
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/position#Sticky_positioning position: sticky on MDN
 * @link https://code.google.com/p/chromium/issues/detail?id=231752 Meta bug for position: sticky on Chromium's tracker
 */
/**
 * `transform` prefixer.
 *
 * @param {*} $args
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/transform transform on MDN
 */
/**
 * `transform-origin` prefixer.
 *
 * @param {*} $args
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/transform-origin transform-origin on MDN
 */
/**
 * `transition` prefixer.
 * Do not use when transitionning prefixed properties
 * to avoid impossible code like `-moz-transition: -webkit-border-radius 1s`.
 *
 * @param {Arglist} $args
 *
 * @link https://developer.mozilla.org/en-US/docs/Web/CSS/transition transition on MDN
 */
/**
 * Default rem baseline.
 * 
 * @type Number
 */
/**
 * Transform a value into rem.
 *
 * @param {Number} $value
 * @param {Number} $baseline ($guss-rem-baseline)
 *
 * @requires {variable} guss-rem-baseline
 *
 * @return {List | Number}
 */
/**
 * Output `rem` units with `px` fallback.
 *
 * @link http://sassmeister.com/gist/7451284 Usage
 * 
 * @param {Map} $properties
 *
 * @requires {function} rem
 */
/**
 * Gutter width.
 * 
 * @type Number
 */
/**
 * Baseline size.
 * 
 * @type Number
 */
/**
 * Column width.
 * 
 * @type Number
 */
/**
 * Row height.
 * 
 * @type Number
 */
/**
 * Number of columns.
 * 
 * @type Number
 */
/**
 * Grid span.
 * Compute the width of a given number of grid columns.
 *
 * @example
 * .element {
 *   width: gs-span(3);
 * }
 *
 * @param {Number} $n-columns
 *
 * @requires {variable} gs-column-width
 * @requires {variable} gs-gutter
 *
 * @return {Number}
 */
/**
 * Grid height.
 * Compute the height of a given number of vertical grid units.
 *
 * @example
 * .element {
 *   padding-top: gs-height(2);
 * }
 *
 * @param {Number} $n-rows
 *
 * @requires {variable} gs-row-height
 * @requires {variable} gs-baseline
 *
 * @return {Number}
 */
/**
 * Grid container.
 * Snaps to `$gs-max-columns` columns at the wide breakpoint.
 *
 * @requires {mixin} mq
 * @requires {function} gs-span
 * @requires {variable} gs-gutter
 * @requires {variable} gs-max-columns
 */
/**
 * Grid columns helper classes, useful for quick prototyping.
 *
 * @example markup
 * <div class="gs-span-3"></div>
 *
 * @requires {variable} gs-max-columns
 * @requires {function} gs-span
 */
/**
 * Grid system.
 *
 * @requires {mixin} gs-container
 */
/* ==========================================================================
   Guss: row
   ========================================================================== */
/**
 * Row utility class.
 * 
 * @type String
 *
 * @group layout
 */
/**
 * When set to false, output a simpler version with a static width.
 *
 * @link http://caniuse.com/#feat=flexbox Flexbox support table
 * 
 * @type Bool
 *
 * @group layout
 */
/**
 * Static width for older browsers.
 * 
 * @type Number
 *
 * @group layout
 */
/**
 * A row is an ensemble of 2, 3 or 4 items that are originally stacked
 * vertically on mobile and flow horizontally on higher breakpoints.
 *
 * @param {String} $base-class
 *
 * @requires {variable} browser-supports-flexbox
 * @requires {variable} guss-row-fallback-width
 * @requires {mixin} mq
 * @requires {mixin} flex-grow
 * @requires {mixin} flex-basis
 * 
 * @link http://sassmeister.com/gist/9b6033675b0f01de21f0 Examples on Sassmeister
 *
 * @example scss
 *  // Sass Mixin
 *  @include guss-row('.classname');
 *
 * @example scss
 *  // Utility class set as `$guss-row-utility-class`
 *  @include guss-row-utility;
 *
 * @example markup
 * <div class="l-row l-row--items-<number of items contained>">
 *     <div class="l-row__item [l-row__item--boost-2]"></div>
 *     <div class="l-row__item"></div>
 *     <div class="l-row__item"></div>
 *     <div class="l-row__item [l-row__item--boost-1]"></div>
 * </div>
 * <!-- --boost-n modifiers are used to add visual importance to an item.
 * Note that this applies only to browsers that support flexbox. -->
 *
 * @group layout
 */
/**
 * Row utility.
 *
 * @requires {variable} guss-row-utility-class
 * @requires {mixin} guss-row
 *
 * @group layout
 */
/* ==========================================================================
   Guss: columns
   ========================================================================== */
/**
 * Minimum column width.
 * 
 * @type Number
 *
 * @group layout
 */
/**
 * Column gutter.
 * 
 * @type Number
 *
 * @group layout
 */
/**
 * Column utility class.
 * 
 * @type String
 *
 * @group layout
 */
/**
 * When set to false, output a simpler version with a static width.
 *
 * @link http://caniuse.com/#feat=multicolumn Column support table
 * 
 * @type Bool
 *
 * @group layout
 */
/**
 * Fallback width when CSS3 columns support is disabled.
 * 
 * @type Number
 *
 * @group layout
 */
/**
 * Number of columns in the non-responsive version.
 * 
 * @type Number
 *
 * @group layout
 */
/**
 * Width of fallback column item.
 *
 * @param {Number} $container-width
 * @param {Number} $gap-between-columns
 * @param {Number} $number-of-columns
 *
 * @return {Number}
 *
 * @group layout
 */
/**
 * A "columns pattern" fits as many "$guss-column-min-width"-wide columns
 * in any type of context: full-width container, sidebarâ€¦
 *
 * @param {String} $base-class
 * @param {Number} $column-min-width         ($guss-column-min-width)
 * @param {Number} $column-gap               ($guss-column-gap)
 * @param {Number} $columns-fallback-width   ($guss-columns-fallback-width)
 * @param {Number} $columns-fallback-columns ($guss-columns-fallback-columns)
 * @param {Bool}   $css3-columns-support     ($browser-supports-columns)
 *
 * @requires {variable} guss-column-min-width
 * @requires {variable} guss-column-gap
 * @requires {variable} guss-columns-fallback-width
 * @requires {variable} guss-columns-fallback-columns
 * @requires {variable} browser-supports-columns
 * @requires {function} width-of-fallback-column-item
 * @requires {function} rem
 * @requires {mixin} mq
 *
 * @link http://sassmeister.com/gist/5c09ed0242085ba8d705 Examples on Sassmeister
 * 
 * @example
 *  // Usage 1: Sass mixin
 *  @include guss-columns('.classname');
 *
 *  // Usage 2: utility class set as `$guss-columns-utility-class`
 *  @include guss-columns-utility;
 *
 * @example markup
 * <div class="l-columns">
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 *     <div class="l-columns__item"></div>
 * </div>
 *
 * @group layout
 */
/**
 * Column utility.
 *
 * @requires {mixin} guss-columns
 * @requires {variable} guss-columns-utility-class
 *
 * @group layout
 */
/**
 * Get a color from initial color palette
 * 
 * @param {String} $name                    - color to get
 * @param {Map}    $palette ($guss-colours) - palette
 *
 * @requires {variable} guss-colours
 *
 * @return {Color | Null}
 */
/**
 * Generate a color palette
 *
 * @param {Map}    $palette  ($guss-colours) - palette
 * @param {String} $prefix   (c-)            - prefix
 * @param {String} $property (color)         - property
 *
 * @requires {variable} guss-colours
 */
/**
 * Guss default colours
 * 
 * @type Map
 */
/**
 * Fieldset's `border-top` style.
 *
 * @type List
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Text fields' `font-family`.
 *
 * @type List
 *
 * @requires {variable} f-sans-serif-text
 *
 * @group forms
 */
/**
 * Text fields' `color`.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Text fields' `border-color`.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Text fields' `border-color` when field is focused.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Form error `color`.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Form error `background-color`.
 *
 * @type Color
 *
 * @group forms
 */
/**
 * Form error `border-color`.
 *
 * @type Color
 *
 * @group forms
 */
/**
 * Form error fields `border-color`.
 *
 * @type Color
 *
 * @requires {variable} guss-forms-error-colour
 *
 * @group forms
 */
/**
 * Form success `color`.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Form success `background-color`.
 *
 * @type Color
 *
 * @group forms
 */
/**
 * Form success `border-color`.
 *
 * @type Color
 *
 * @group forms
 */
/**
 * Submit button `background-color`.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Submit button `background-color` when focused.
 *
 * @type Color
 *
 * @requires {variable} guss-forms-submit-background
 *
 * @group forms
 */
/**
 * Submit button `background-color` when active.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Submit button `background-color` when disabled.
 *
 * @type Color
 *
 * @requires {function} guss-colour
 *
 * @group forms
 */
/**
 * Fix a bug Internet Explorer 8 where text in password fields
 * would become invisible when `font-family` references a webfont.
 *
 * @group forms
 */
/**
 * Default form styles
 *
 * @group forms
 */
html {
  font-family: "Guardian Text Egyptian Web", Georgia, serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 62.5%;
  font-size: calc(1em * .625); }

body {
  font-size: 1.6em;
  line-height: 1.5; }
body {
  color: #333333; }

.gs-container {
  position: relative;
  margin: 0 auto;
  max-width: 1140px; }
  @media all and (min-width: 81.25em) {
    .gs-container {
      max-width: 1300px; } }

.form {
  margin-top: 24px;
  margin-bottom: 24px; }

.form__heading {
  font-size: 18px;
  line-height: 28px;
  font-family: "Guardian Text Egyptian Web", Georgia, serif;
  font-weight: bold;
  margin-left: 0;
  margin-right: 0; }

.form__note,
.form-field__note {
  font-family: "Guardian Text Sans Web", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  font-size: 14px;
  margin-bottom: 8px; }

.fieldset {
  border: 0;
  border-top: 1px solid #f1f1f1;
  display: table;
  padding: 15px 0 24px;
  margin: 0; }

@media all and (min-width: 61.25em) {
  .fieldset__heading {
    display: table-cell;
    padding-right: 100px;
    width: 220px;
    vertical-align: top; }

  .fieldset__fields {
    display: table-cell;
    vertical-align: top;
    width: 460px; } }
.form-fields-group .form-field {
  margin-bottom: 0; }

.form-field {
  list-style: none;
  margin: 0 0 24px;
  padding: 0; }

.form-field__submit .form-field__note {
  margin: 0 0 24px; }
  @media all and (min-width: 61.25em) {
    .form-field__submit .form-field__note {
      float: right;
      width: 60%;
      margin: 0; } }

.form-field--no-margin {
  margin: 0; }

.form-field--error .label {
  color: #d61d00; }
.form-field--error .text-input,
.form-field--error .text-input:focus {
  border-color: #d61d00; }

.form__error {
  font-size: 14px;
  line-height: 18px;
  font-family: "Guardian Agate Sans 1 Web", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  background-color: #fdf4f3;
  border-bottom: 1px solid #ff998a;
  border-top: 1px solid #ff998a;
  color: #d61d00;
  margin-top: 6px;
  padding: 7px 8px; }

.form__success {
  font-size: 14px;
  line-height: 18px;
  font-family: "Guardian Agate Sans 1 Web", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  background-color: #f3ffdf;
  border-bottom: 1px solid #adfd2e;
  border-top: 1px solid #adfd2e;
  color: #4a7801;
  margin-top: 6px;
  padding: 7px 8px; }

.form-field__error {
  color: #d61d00;
  margin-top: 6px; }

.form-field__note--below {
  margin-bottom: 0;
  margin-top: 6px; }

.form-field__note--left {
  float: left; }

.form-field__note--right {
  float: right;
  margin-left: 20px; }

.form-fields__inline ul {
  margin: 0;
  padding: 0; }
  .form-fields__inline ul .form-field {
    display: inline-block; }
.form-fields__inline .form-fields__heading {
  font-size: 18px;
  line-height: 28px;
  margin: 0 0 12px;
  display: block; }

.form-fields--date-of-birth .form-field {
  margin: 0 18px 0 0; }

.label {
  cursor: pointer;
  display: block;
  margin-bottom: 6px; }

.text-input,
.textarea {
  border: 1px solid gainsboro;
  -webkit-box-shadow: none;
  -moz-box-shadow: none;
  box-shadow: none;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  color: #333333;
  display: inline-block;
  font-family: "Guardian Text Sans Web", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  padding: 8px 8px 7px;
  font-size: 16px;
  line-height: 1.4;
  outline: none;
  -webkit-border-radius: 0;
  border-radius: 0;
  width: 100%;
  -webkit-appearance: none; }
  .text-input:focus,
  .textarea:focus {
    border-color: #767676; }
  @media all and (min-width: 46.25em) {
    .text-input,
    .textarea {
      font-size: 14px; } }

.textarea {
  resize: vertical; }

.textarea--no-resize {
  min-height: 80px;
  resize: none; }

.textarea--mid {
  min-height: 108px; }

.textarea--long {
  min-height: 160px; }

.submit-input {
  background: #005689;
  border: 0 none;
  color: #ffffff;
  cursor: pointer;
  display: inline-block;
  font-size: 14px;
  margin: 0 20px 0 0;
  min-width: 140px;
  padding: 11px 10px;
  outline: none;
  text-align: center; }
  .submit-input:hover, .submit-input:focus {
    background: #004670; }
  .submit-input:active {
    background: #333333; }

.submit-input[disabled] {
  background: #dfdfdf; }

.check-label,
.radio-label {
  display: block;
  font-family: "Guardian Text Sans Web", "Helvetica Neue", Helvetica, Arial, "Lucida Grande", sans-serif;
  font-size: 14px;
  margin-bottom: 4px;
  padding-left: 20px; }

.check-label--helper {
  display: inline-block;
  vertical-align: middle; }

[type=checkbox],
[type=radio] {
  float: left;
  height: 13px;
  margin-left: -20px;
  margin-top: 2px;
  width: 13px; }

[type=password] {
  font-family: sans-serif !important; }
